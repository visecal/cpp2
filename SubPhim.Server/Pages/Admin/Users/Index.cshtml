@page
@model SubPhim.Server.Pages.Admin.Users.IndexModel
@inject Microsoft.AspNetCore.Antiforgery.IAntiforgery Xsrf
@using SubPhim.Server.Utils
@using SubPhim.Server.Data
@{
    ViewData["Title"] = "Quản lý người dùng";
    Layout = "~/Pages/Shared/_AdminLayout.cshtml";
}

@* SỬA LỖI: Thêm TempData để hiển thị thông báo từ nút Reset *@
@if (TempData["SuccessMessage"] != null)
{
    <div class="alert alert-success">@TempData["SuccessMessage"]</div>
}
@if (TempData["ErrorMessage"] != null)
{
    <div class="alert alert-danger">@TempData["ErrorMessage"]</div>
}


<div class="d-flex justify-content-between align-items-center mb-4 flex-wrap gap-2">
    <h1>@ViewData["Title"]</h1>
    <div class="d-flex gap-2">
        @* THÊM MỚI: Nút Reset Tất Cả Thiết Bị *@
        <form method="post" asp-page-handler="ResetAllDevices" onsubmit="return confirm('CẢNH BÁO CỰC KỲ NGUY HIỂM!\n\nHành động này sẽ xóa TOÀN BỘ thông tin đăng nhập thiết bị của TẤT CẢ người dùng.\nTất cả mọi người sẽ bị buộc đăng xuất khỏi ứng dụng.\n\nBạn có chắc chắn muốn tiếp tục không?');">
            @Html.AntiForgeryToken()
            <button type="submit" class="btn btn-danger">
                <i class="bi bi-hdd-stack-x-fill"></i> Reset Tất Cả Thiết Bị
            </button>
        </form>

        <a asp-page="Create" class="btn btn-success">
            <i class="bi bi-person-plus-fill"></i> Tạo User Mới
        </a>
    </div>
</div>

<div class="card">
    <div class="card-header">
        <form method="get" class="mb-0">
            <div class="input-group">
                <input type="search" class="form-control" placeholder="Tìm theo UID, Username hoặc Email..." asp-for="SearchString" />
                <button type="submit" class="btn btn-primary"><i class="bi bi-search"></i> Tìm</button>
                <a asp-page="./Index" class="btn btn-secondary">Làm mới</a>
            </div>
        </form>
    </div>
    <div class="card-body p-0">
        <!-- CHẾ ĐỘ BẢNG CHO DESKTOP -->
        <div class="table-responsive d-none d-lg-block">
            <table class="table table-hover table-striped mb-0">
                <thead class="table-dark">
                    <tr>
                        <th>UID</th>
                        <th>Username</th>
                        <th>Tier</th>
                        <th>Hạn đăng ký</th>
                        <th>Video (dùng/tổng)</th>
                        <th>Dịch Truyện (dùng/tổng)</th>
                        <th>Dịch SRT (dùng/tổng)</th>
                        <th>Dịch SRT Local</th>
                        <th style="min-width: 200px;">Quyền API</th>
                        <th style="min-width: 200px;">Quyền Tính Năng</th>
                        <th>Đăng nhập cuối</th>
                        <th class="text-center">Thao tác</th>
                    </tr>
                </thead>
                <tbody>
                    @if (Model.Users.Any())
                    {
                        @foreach (var user in Model.Users)
                        {
                            <tr id="user-row-@user.Id" class="@(user.IsBlocked ? "table-danger" : "")">
                                <td><a asp-page="./Details" asp-route-id="@user.Id" class="fw-bold">@user.Uid</a></td>
                                <td>
                                    <a asp-page="./Details" asp-route-id="@user.Id">@user.Username</a>
                                    @if (user.IsBlocked)
                                    {
                                        <span class="badge bg-danger ms-1">Bị chặn</span>
                                    }
                                </td>
                                <td id="tier-cell-@user.Id">@user.Tier</td>
                                <td id="expiry-cell-@user.Id">@DisplayHelper.GetSubscriptionStatus(Enum.Parse<SubscriptionTier>(user.Tier), user.SubscriptionExpiry)</td>
                                <td id="video-limit-cell-@user.Id">@user.VideosProcessedToday / @(user.DailyVideoLimit == -1 ? "∞" : user.DailyVideoLimit)</td>
                                <td id="request-limit-cell-@user.Id">@user.DailyRequestCount / @(user.DailyRequestLimitOverride == -1 ? "∞" : user.DailyRequestLimitOverride)</td>
                                <td id="srt-limit-cell-@user.Id">@user.SrtLinesUsedToday / @user.DailySrtLineLimit</td>
                                <td id="local-srt-limit-cell-@user.Id">@user.DailyLocalSrtLimit</td>
                                <td id="apis-cell-@user.Id">@Html.Raw(DisplayHelper.FormatFlags(user.AllowedApiAccess))</td>
                                <td id="features-cell-@user.Id">@Html.Raw(DisplayHelper.FormatFlags(user.GrantedFeatures))</td>
                                <td>@(user.LastLogin?.ToVietNamTimeString("g") ?? "Chưa đăng nhập")</td>
                                <td class="text-center">
                                    <button class="btn btn-sm btn-warning manage-permissions-btn"
                                            data-bs-toggle="modal" data-bs-target="#permissionsModal"
                                            data-user-id="@user.Id"
                                            data-user-name="@user.Username"
                                            data-user-tier="@user.Tier"
                                            data-granted-features="@user.GrantedFeatures"
                                            data-allowed-apis="@user.AllowedApiAccess"
                                            data-daily-video-limit="@user.DailyVideoLimit"
                                            data-daily-request-limit="@user.DailyRequestLimitOverride"
                                            data-daily-srt-limit="@user.DailySrtLineLimit"
                                            data-daily-local-srt-limit="@user.DailyLocalSrtLimit">
                                        <i class="bi bi-key-fill"></i> Sửa quyền
                                    </button>
                                </td>
                            </tr>
                        }
                    }
                    else
                    {
                        <tr><td colspan="12" class="text-center p-4">Không có người dùng nào phù hợp.</td></tr>
                    }
                </tbody>
            </table>
        </div>

        <!-- CHẾ ĐỘ CARD CHO MOBILE -->
        <div class="d-lg-none">
            @if (Model.Users.Any())
            {
                @foreach (var user in Model.Users)
                {
                    <div class="card m-2 @(user.IsBlocked ? "bg-danger-subtle" : "")">
                        <div class="card-body pb-2">
                            <div class="d-flex justify-content-between align-items-start mb-2">
                                <h5 class="card-title mb-0">
                                    <a asp-page="./Details" asp-route-id="@user.Id" class="fw-bold text-decoration-none">@user.Username</a>
                                    @if (user.IsBlocked)
                                    {
                                        <span class="badge bg-danger ms-1">Bị chặn</span>
                                    }
                                </h5>
                                <span class="badge bg-secondary">@user.Tier</span>
                            </div>
                            <p class="card-text text-muted small">UID: @user.Uid</p>
                            <div class="row g-2 small">
                                <div class="col-6"><strong>Hạn:</strong> @DisplayHelper.GetSubscriptionStatus(Enum.Parse<SubscriptionTier>(user.Tier), user.SubscriptionExpiry)</div>
                                <div class="col-6"><strong>Đăng nhập cuối:</strong> @(user.LastLogin?.ToVietNamTimeString("g") ?? "Chưa có")</div>
                                <div class="col-6"><strong>Video:</strong> @user.VideosProcessedToday / @(user.DailyVideoLimit == -1 ? "∞" : user.DailyVideoLimit)</div>
                                <div class="col-6"><strong>Dịch Truyện:</strong> @user.DailyRequestCount / @(user.DailyRequestLimitOverride == -1 ? "∞" : user.DailyRequestLimitOverride)</div>
                                <div class="col-12"><strong>Dịch SRT:</strong> @user.SrtLinesUsedToday / @user.DailySrtLineLimit</div>
                                <div class="col-12"><strong>Dịch SRT Local/Ngày:</strong> @user.DailyLocalSrtLimit</div>
                            </div>
                            <hr class="my-2">
                            <div class="small mb-2">
                                <strong>Quyền API:</strong>
                                <div class="mt-1">@Html.Raw(DisplayHelper.FormatFlags(user.AllowedApiAccess))</div>
                            </div>
                            <div class="small">
                                <strong>Quyền Tính Năng:</strong>
                                <div class="mt-1">@Html.Raw(DisplayHelper.FormatFlags(user.GrantedFeatures))</div>
                            </div>
                        </div>
                        <div class="card-footer bg-transparent border-0 pt-0">
                            <button class="btn btn-sm btn-warning w-100 manage-permissions-btn"
                                    data-bs-toggle="modal" data-bs-target="#permissionsModal"
                                    data-user-id="@user.Id"
                                    data-user-name="@user.Username"
                                    data-user-tier="@user.Tier"
                                    data-granted-features="@user.GrantedFeatures"
                                    data-allowed-apis="@user.AllowedApiAccess"
                                    data-daily-video-limit="@user.DailyVideoLimit"
                                    data-daily-request-limit="@user.DailyRequestLimitOverride"
                                    data-daily-srt-limit="@user.DailySrtLineLimit"
                                    data-daily-local-srt-limit="@user.DailyLocalSrtLimit">
                                <i class="bi bi-key-fill"></i> Sửa quyền
                            </button>
                        </div>
                    </div>
                }
            }
            else
            {
                <p class="text-center p-4">Không có người dùng nào phù hợp.</p>
            }
        </div>
    </div>
</div>

<!-- Modal Chỉnh sửa quyền -->
<div class="modal fade" id="permissionsModal" tabindex="-1" aria-labelledby="permissionsModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="permissionsModalLabel">Chỉnh sửa quyền cho: <span id="modalUserName" class="fw-bold"></span></h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <input type="hidden" id="modalUserId" />
                <div id="modal-alert-placeholder"></div>

                <h5 class="mt-2"><i class="bi bi-lightning-charge-fill"></i> Thao Tác Nhanh</h5>
                <div class="p-2 rounded bg-light mb-4">
                    <div class="row g-2 align-items-center">
                        <div class="col-md-6">
                            <div class="input-group">
                                <span class="input-group-text">+/- Ngày</span>
                                <input type="number" class="form-control" id="modalDays" value="30">
                                <button class="btn btn-success" id="addSubTimeBtn" title="Thêm ngày"><i class="bi bi-plus-lg"></i></button>
                                <button class="btn btn-warning" id="subtractSubTimeBtn" title="Trừ ngày"><i class="bi bi-dash-lg"></i></button>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="btn-group w-100">
                                <button class="btn btn-info" id="resetDevicesBtn" title="Reset Thiết Bị">
                                    <i class="bi bi-hdd-stack-fill"></i>
                                </button>
                                <button class="btn btn-danger" id="banUserBtn" title="Cấm Tài Khoản & Thiết Bị">
                                    <i class="bi bi-shield-slash-fill"></i>
                                </button>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="row align-items-end">
                    <div class="col-md-6">
                        <h5 class="mt-4"><i class="bi bi-sliders"></i> Giới hạn Sử dụng</h5>
                    </div>
                    <div class="col-md-6 mb-2">
                        <label for="modalTier" class="form-label fw-bold">Thay đổi Gói</label>
                        <select id="modalTier" class="form-select form-select-sm">
                            @foreach (var tier in Enum.GetValues<SubscriptionTier>())
                            {
                                <option value="@tier">@tier.ToString()</option>
                            }
                        </select>
                    </div>
                </div>
                <div class="row p-2 rounded bg-light mb-3">
                    <div class="col-md-3 mb-2">
                        <label for="modalDailyVideoLimit" class="form-label">Video / Ngày</label>
                        <input type="number" class="form-control" id="modalDailyVideoLimit">
                    </div>
                    <div class="col-md-3 mb-2">
                        <label for="modalDailyRequestLimit" class="form-label">Dịch Truyện / Ngày</label>
                        <input type="number" class="form-control" id="modalDailyRequestLimit">
                    </div>
                    <div class="col-md-3 mb-2">
                        <label for="modalDailySrtLimit" class="form-label">Dịch SRT / Ngày</label>
                        <input type="number" class="form-control" id="modalDailySrtLimit">
                    </div>
                    <div class="col-md-3 mb-2">
                        <label for="modalDailyLocalSrtLimit" class="form-label">Dịch SRT Local / Ngày</label>
                        <input type="number" class="form-control" id="modalDailyLocalSrtLimit">
                    </div>
                </div>

                <h5><i class="bi bi-robot"></i> Quyền Truy Cập API</h5>
                <div class="row p-2 rounded bg-light mb-3">
                    @foreach (var apiName in Model.AllApiNames)
                    {
                        <div class="col-md-4">
                            <div class="form-check form-switch">
                                <input class="form-check-input" type="checkbox" value="@apiName" id="api-check-@apiName">
                                <label class="form-check-label" for="api-check-@apiName">@apiName</label>
                            </div>
                        </div>
                    }
                </div>
                <h5><i class="bi bi-toggles2"></i> Quyền Truy Cập Tính Năng</h5>
                <div class="row p-2 rounded bg-light">
                    @foreach (var featureName in Model.AllFeatureNames)
                    {
                        <div class="col-md-4">
                            <div class="form-check form-switch">
                                <input class="form-check-input" type="checkbox" value="@featureName" id="feature-check-@featureName">
                                <label class="form-check-label" for="feature-check-@featureName">@featureName</label>
                            </div>
                        </div>
                    }
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Đóng</button>
                <button type="button" class="btn btn-primary" id="savePermissionsBtn">Lưu thay đổi</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const modalElement = document.getElementById('permissionsModal');
            if (!modalElement) return;

            const antiforgeryToken = "@Xsrf.GetAndStoreTokens(HttpContext).RequestToken";

            function parseFlags(flagsString) {
                if (!flagsString || flagsString === 'None') return [];
                return flagsString.split(',').map(s => s.trim());
            }

            modalElement.addEventListener('show.bs.modal', function (event) {
                const button = event.relatedTarget;
                const userId = button.getAttribute('data-user-id');
                const userName = button.getAttribute('data-user-name');
                const userTier = button.getAttribute('data-user-tier');
                const grantedFeatures = parseFlags(button.getAttribute('data-granted-features'));
                const allowedApis = parseFlags(button.getAttribute('data-allowed-apis'));
                const dailyVideoLimit = button.getAttribute('data-daily-video-limit');
                const dailyRequestLimit = button.getAttribute('data-daily-request-limit');
                const dailySrtLimit = button.getAttribute('data-daily-srt-limit');
                const dailyLocalSrtLimit = button.getAttribute('data-daily-local-srt-limit');

                document.getElementById('modalUserId').value = userId;
                document.getElementById('modalUserName').innerText = userName;
                document.getElementById('modal-alert-placeholder').innerHTML = '';

                document.getElementById('modalTier').value = userTier;
                document.getElementById('modalDailyVideoLimit').value = dailyVideoLimit;
                document.getElementById('modalDailyRequestLimit').value = dailyRequestLimit;
                document.getElementById('modalDailySrtLimit').value = dailySrtLimit;
                document.getElementById('modalDailyLocalSrtLimit').value = dailyLocalSrtLimit;

                document.querySelectorAll('#permissionsModal input[id^="api-check-"]').forEach(checkbox => {
                    checkbox.checked = allowedApis.includes(checkbox.value);
                });
                document.querySelectorAll('#permissionsModal input[id^="feature-check-"]').forEach(checkbox => {
                    checkbox.checked = grantedFeatures.includes(checkbox.value);
                });
            });

            document.getElementById('savePermissionsBtn').addEventListener('click', async function () {
                const userId = document.getElementById('modalUserId').value;
                const saveButton = this;
                saveButton.disabled = true;
                saveButton.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Đang lưu...';

                const formData = new URLSearchParams();
                formData.append('id', userId);
                formData.append('tier', document.getElementById('modalTier').value);
                formData.append('dailyVideoLimit', document.getElementById('modalDailyVideoLimit').value);
                formData.append('dailyRequestLimitOverride', document.getElementById('modalDailyRequestLimit').value);
                formData.append('dailySrtLineLimit', document.getElementById('modalDailySrtLimit').value);
                formData.append('dailyLocalSrtLimit', document.getElementById('modalDailyLocalSrtLimit').value);

                const selectedApis = Array.from(document.querySelectorAll('#permissionsModal input[id^="api-check-"]:checked')).map(cb => cb.value);
                selectedApis.forEach(api => formData.append('apis', api));

                const selectedFeatures = Array.from(document.querySelectorAll('#permissionsModal input[id^="feature-check-"]:checked')).map(cb => cb.value);
                selectedFeatures.forEach(feature => formData.append('features', feature));

                try {
                    const response = await fetch(`/Admin/Users?handler=UpdatePermissions`, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/x-www-form-urlencoded', 'RequestVerificationToken': antiforgeryToken },
                        body: formData
                    });

                    const result = await response.json();

                    if (response.ok) {
                        updateTableRow(userId, result);
                        showAlert('success', result.message);

                        const triggerButton = document.querySelector(`.manage-permissions-btn[data-user-id='${userId}']`);
                        if(triggerButton) {
                            triggerButton.setAttribute('data-user-tier', result.newTier);
                            triggerButton.setAttribute('data-allowed-apis', result.allowedApis);
                            triggerButton.setAttribute('data-granted-features', result.grantedFeatures);
                            triggerButton.setAttribute('data-daily-video-limit', result.dailyVideoLimit);
                            triggerButton.setAttribute('data-daily-request-limit', result.dailyRequestLimitOverride);
                            triggerButton.setAttribute('data-daily-srt-limit', result.dailySrtLineLimit);
                            triggerButton.setAttribute('data-daily-local-srt-limit', result.dailyLocalSrtLimit);
                        }

                        const modalInstance = bootstrap.Modal.getInstance(modalElement);
                        setTimeout(() => modalInstance.hide(), 1000);
                    } else {
                        showAlert('danger', result.message || 'Có lỗi xảy ra.');
                    }
                } catch (error) {
                    showAlert('danger', 'Lỗi kết nối đến server.');
                } finally {
                    saveButton.disabled = false;
                    saveButton.innerHTML = 'Lưu thay đổi';
                }
            });

            async function performQuickAction(handler, data, confirmMessage) {
                if (confirmMessage && !confirm(confirmMessage)) {
                    return;
                }

                const userId = document.getElementById('modalUserId').value;
                const formData = new URLSearchParams();
                formData.append('id', userId);
                for (const key in data) {
                    formData.append(key, data[key]);
                }

                try {
                    const response = await fetch(`/Admin/Users?handler=${handler}`, {
                        method: 'POST',
                        headers: { 'RequestVerificationToken': antiforgeryToken, 'Content-Type': 'application/x-www-form-urlencoded' },
                        body: formData
                    });

                    const result = await response.json();

                    if (response.ok) {
                        showAlert('success', result.message);
                        if (handler === 'BanUserAndDevices' || handler === 'SubtractSubTime') {
                            setTimeout(() => window.location.reload(), 1500);
                        }
                        if (result.newExpiry) {
                             const expiryCell = document.getElementById(`expiry-cell-${userId}`);
                             if(expiryCell) expiryCell.innerText = formatSubscriptionStatus(document.getElementById(`tier-cell-${userId}`).innerText, result.newExpiry);
                        }
                    } else {
                        showAlert('danger', result.message || 'Có lỗi xảy ra.');
                    }
                } catch (error) {
                    showAlert('danger', 'Lỗi kết nối đến server.');
                }
            }

            document.getElementById('addSubTimeBtn').addEventListener('click', function() {
                const days = document.getElementById('modalDays').value;
                performQuickAction('AddSubTime', { days: days });
            });

            document.getElementById('subtractSubTimeBtn').addEventListener('click', function() {
                const days = document.getElementById('modalDays').value;
                performQuickAction('SubtractSubTime', { days: days }, 'CẢNH BÁO!\nHành động này sẽ TRỪ đi số ngày sử dụng của tài khoản này.\n\nBạn có chắc chắn muốn tiếp tục?');
            });

            document.getElementById('resetDevicesBtn').addEventListener('click', function() {
                performQuickAction('ResetDevices', {}, 'Bạn có chắc chắn muốn XÓA TOÀN BỘ thiết bị của user này?');
            });

            document.getElementById('banUserBtn').addEventListener('click', function() {
                performQuickAction('BanUserAndDevices', {}, 'CẢNH BÁO!\nHành động này sẽ CHẶN tài khoản và CẤM TẤT CẢ các thiết bị đã đăng nhập của người dùng này.\n\nBạn có chắc chắn muốn tiếp tục?');
            });

            function updateTableRow(userId, data) {
                const tierCell = document.getElementById(`tier-cell-${userId}`);
                if(tierCell) tierCell.innerText = data.newTier;

                const expiryCell = document.getElementById(`expiry-cell-${userId}`);
                if(expiryCell) expiryCell.innerText = formatSubscriptionStatus(data.newTier, data.newExpiry);

                const videoLimitCell = document.getElementById(`video-limit-cell-${userId}`);
                if(videoLimitCell) videoLimitCell.innerText = `${videoLimitCell.innerText.split('/')[0].trim()} / ${data.dailyVideoLimit == -1 ? '∞' : data.dailyVideoLimit}`;

                const requestLimitCell = document.getElementById(`request-limit-cell-${userId}`);
                if(requestLimitCell) requestLimitCell.innerText = `${requestLimitCell.innerText.split('/')[0].trim()} / ${data.dailyRequestLimitOverride == -1 ? '∞' : data.dailyRequestLimitOverride}`;

                const srtLimitCell = document.getElementById(`srt-limit-cell-${userId}`);
                if(srtLimitCell) srtLimitCell.innerText = `${srtLimitCell.innerText.split('/')[0].trim()} / ${data.dailySrtLineLimit}`;

                const localSrtLimitCell = document.getElementById(`local-srt-limit-cell-${userId}`);
                if(localSrtLimitCell) localSrtLimitCell.innerText = data.dailyLocalSrtLimit;

                const apiCell = document.getElementById(`apis-cell-${userId}`);
                if(apiCell) apiCell.innerHTML = formatBadges(data.allowedApis);

                const featureCell = document.getElementById(`features-cell-${userId}`);
                if(featureCell) featureCell.innerHTML = formatBadges(data.grantedFeatures);
            }

            function formatSubscriptionStatus(tier, expiryDateString) {
                if (tier === 'Lifetime') return 'Vĩnh viễn';
                if (tier === 'Free') return 'Tự do';
                if (!expiryDateString) return 'Không xác định';

                const expiryDate = new Date(expiryDateString);
                const now = new Date();

                if (expiryDate < now) return 'Đã hết hạn';

                const timeLeft = expiryDate - now;
                const daysLeft = Math.floor(timeLeft / (1000 * 60 * 60 * 24));
                if (daysLeft > 0) return `Còn ${daysLeft} ngày`;

                const hoursLeft = Math.floor(timeLeft / (1000 * 60 * 60));
                if (hoursLeft > 0) return `Còn ${hoursLeft} giờ`;

                return 'Sắp hết hạn';
            }

            function showAlert(type, message) {
                const placeholder = document.getElementById('modal-alert-placeholder');
                placeholder.innerHTML = `<div class="alert alert-${type}">${message}</div>`;
            }

            function formatBadges(flagsString) {
                 if (!flagsString || flagsString === 'None') return '<span class="badge bg-secondary">None</span>';
                 const flags = flagsString.split(',').map(s => s.trim());
                 return flags.map(f => `<span class="badge bg-info text-dark me-1">${f}</span>`).join('');
            }
        });
    </script>
}